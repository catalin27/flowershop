-# = javascript_include_tag 'orders/index'
= render template: "orders/new"

.row.mb-4.flex-row-reverse
  .col-auto.fs-4
    Displaying
    .btn-group{ role: "group" }
      %input.btn-check.btn-filter{ type: "radio", id: "btn-filter-all", name: "btn-filter", checked: true }
      %label.btn.btn-outline-primary{ for: "btn-filter-all" } All

      %input.btn-check.btn-filter{ type: "radio", id: "btn-filter-pending", name: "btn-filter" }
      %label.btn.btn-outline-primary{ for: "btn-filter-pending" } Pending

      %input.btn-check.btn-filter{ type: "radio", id: "btn-filter-delivered", name: "btn-filter" }
      %label.btn.btn-outline-primary{ for: "btn-filter-delivered" } Delivered
    orders

#orders.row.g-3
  - @orders.each do |order|
    = render template: "orders/show", locals: {order: order}

:javascript
  const ordersToHtml = orders => {
    const htmlOrders = orders.map(order => {
      return `
        <div class="col-xs-12 col-sm-6 col-md-4 col-lg-3">
          <div class="card">
            <div class="card-body">
              <strong>${order.sender_name}</strong>
              wants to send
              <strong>${order.flowers}</strong>
              to
              <strong>${order.recipient_name}</strong>
              <div class="mt-3">
                State:
                <div class="btn-group btn-group-sm" role="group">
                  <input class="btn-check btn-state" type="radio" id="btn-pending-${order.id}" name="btn-state-${order.id}" ${order.state === 'pending' ? 'checked' : ''}>
                  <label class="btn btn-outline-primary" for="btn-pending-${order.id}">Pending</label>

                  <input class="btn-check btn-state" type="radio" id="btn-delivered-${order.id}" name="btn-state-${order.id}" ${order.state === 'delivered' ? 'checked' : ''}>
                  <label class="btn btn-outline-primary" for="btn-delivered-${order.id}">Delivered</label>
                </div>
              </div>
            </div>
            <div class="card-footer">
              Deliver to:
              <address class="d-inline fst-italic m-0">${order.delivery_address}</address>
            </div>
          </div>
        </div>
    `}).join('')

    document.querySelector('#orders').innerHTML = htmlOrders
    addStateClickListeners()
  }

  const addStateClickListeners = () => {
    const stateClick = (e) => {
      const [_, state, id] = e.target.id.split('-')
      console.log('Hello', state, id)

      fetch(`http://localhost:3000/orders/${id}`, {
        method: 'PATCH',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({state})
      })
    }

    document.querySelectorAll('input.btn-check.btn-state').forEach( button => {
      button.addEventListener('click', stateClick)
    })
  }

  const addFilterClickListeners = () => {
    const filterClick = (e) => {
      const state = e.target.id.split('-').at(-1)
      window.filteredState = state
      const queryString = new URLSearchParams({state})

      fetch('http://localhost:3000/orders?' + queryString, {
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        }
      }).then(response => response.json())
      .then(orders => {
        ordersToHtml(orders)
      })
    }

    document.querySelectorAll('input.btn-check.btn-filter').forEach( button => {
      button.addEventListener('click', filterClick)
    })
  }

  addStateClickListeners()
  addFilterClickListeners()

  setInterval(() => {
    const queryString = new URLSearchParams({ state: window.filteredState})

    fetch('http://localhost:3000/orders?' + queryString, {
      headers: {
        'Accept': 'application/json'
      }
    }).then(response => response.json())
    .then(orders => {
      ordersToHtml(orders)
      console.log('Did it')
    })
  }, 5000)
